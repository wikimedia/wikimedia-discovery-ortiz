// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// exact_binom
unsigned int exact_binom(double constant_prop, double effect_size, double alpha, double power, bool two_tail);
RcppExport SEXP _ortiz_exact_binom(SEXP constant_propSEXP, SEXP effect_sizeSEXP, SEXP alphaSEXP, SEXP powerSEXP, SEXP two_tailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type constant_prop(constant_propSEXP);
    Rcpp::traits::input_parameter< double >::type effect_size(effect_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< bool >::type two_tail(two_tailSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_binom(constant_prop, effect_size, alpha, power, two_tail));
    return rcpp_result_gen;
END_RCPP
}
// interleaved_bootstraps
std::vector<double> interleaved_bootstraps(std::vector<std::string> sessions, std::vector<std::string> clicks, int bootstraps);
RcppExport SEXP _ortiz_interleaved_bootstraps(SEXP sessionsSEXP, SEXP clicksSEXP, SEXP bootstrapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sessions(sessionsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type clicks(clicksSEXP);
    Rcpp::traits::input_parameter< int >::type bootstraps(bootstrapsSEXP);
    rcpp_result_gen = Rcpp::wrap(interleaved_bootstraps(sessions, clicks, bootstraps));
    return rcpp_result_gen;
END_RCPP
}
// interleaved_confint
List interleaved_confint(std::vector<std::string> sessions, std::vector<std::string> clicks, int bootstraps, double confidence);
RcppExport SEXP _ortiz_interleaved_confint(SEXP sessionsSEXP, SEXP clicksSEXP, SEXP bootstrapsSEXP, SEXP confidenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sessions(sessionsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type clicks(clicksSEXP);
    Rcpp::traits::input_parameter< int >::type bootstraps(bootstrapsSEXP);
    Rcpp::traits::input_parameter< double >::type confidence(confidenceSEXP);
    rcpp_result_gen = Rcpp::wrap(interleaved_confint(sessions, clicks, bootstraps, confidence));
    return rcpp_result_gen;
END_RCPP
}
// interleaved_preference
double interleaved_preference(std::vector<std::string> sessions, std::vector<std::string> clicks);
RcppExport SEXP _ortiz_interleaved_preference(SEXP sessionsSEXP, SEXP clicksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sessions(sessionsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type clicks(clicksSEXP);
    rcpp_result_gen = Rcpp::wrap(interleaved_preference(sessions, clicks));
    return rcpp_result_gen;
END_RCPP
}
// dwell_time_
std::vector < unsigned int > dwell_time_(std::list < std::vector < int > > timestamps);
RcppExport SEXP _ortiz_dwell_time_(SEXP timestampsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::list < std::vector < int > > >::type timestamps(timestampsSEXP);
    rcpp_result_gen = Rcpp::wrap(dwell_time_(timestamps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ortiz_exact_binom", (DL_FUNC) &_ortiz_exact_binom, 5},
    {"_ortiz_interleaved_bootstraps", (DL_FUNC) &_ortiz_interleaved_bootstraps, 3},
    {"_ortiz_interleaved_confint", (DL_FUNC) &_ortiz_interleaved_confint, 4},
    {"_ortiz_interleaved_preference", (DL_FUNC) &_ortiz_interleaved_preference, 2},
    {"_ortiz_dwell_time_", (DL_FUNC) &_ortiz_dwell_time_, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ortiz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
